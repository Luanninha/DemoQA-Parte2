package Metodos;

import static org.junit.Assert.assertEquals;

import java.io.File;
import java.io.IOException;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class Metodos {
    WebDriver driver;

    
    //Metodo para abrir e maximizar navegador
    public void AbrirNavegador(String url) {
		System.setProperty("webdriver.chrome.driver", "./Driver/chromedriver.exe");
		driver = new ChromeDriver();
		driver.manage().window().maximize();
		driver.get(url);
    }

    // Método para clicar
    public void clicar(By elemento) {
        driver.findElement(elemento).click();
    }

    // Método para preencher
    public void preencher(By elemento, String nome) {
        driver.findElement(elemento).sendKeys(nome);
    }

    // Método para pausar
    public void pausa(int tempo) throws InterruptedException {
       Thread.sleep(tempo);}

    // Método para fechar navegador
    public void fecharNavegador() {
        driver.quit();
    }

    // Método para validar texto
    public void validarTexto(By elemento, String textoEsperado) {
        String mensagemCapturada = driver.findElement(elemento).getText().trim();
        mensagemCapturada = mensagemCapturada.replaceAll("\\s+", " ");
        textoEsperado = textoEsperado.trim().replaceAll("\\s+", " ");
        System.out.println("Texto Capturado: [" + mensagemCapturada + "]");
        assertEquals(textoEsperado, mensagemCapturada);
    }
    
    //metodo para fechar popup
    public void fecharPopup(By elemento) {
        aguardarElementoVisivel(elemento, 10);
        aguardarElementoClicavel(elemento, 10);
        clicar(elemento);
    }



    // Método para tirar print
    public void tirarPrint(String nome) throws IOException {
        TakesScreenshot print = ((TakesScreenshot) driver);
        File SrcFile = print.getScreenshotAs(OutputType.FILE);
        File Desfile = new File("./src/evidencias/" + nome + ".png");
        FileUtils.copyFile(SrcFile, Desfile);
    }

    // Método para aguardar o elemento ficar visível
    public void aguardarElementoVisivel(By elemento, int tempo) {
        WebDriverWait wait = new WebDriverWait(driver, tempo);
        wait.until(ExpectedConditions.visibilityOfElementLocated(elemento));
    }
    
    // Método para selecionar um valor em um dropdown
    public void selecionar(By elemento, String valor) {
        Select dropdown = new Select(driver.findElement(elemento));
        dropdown.selectByVisibleText(valor);
    }
    
    // Método para realizar duplo clique
    public void duploClique(By elemento) {
        Actions action = new Actions(driver);
        action.doubleClick(driver.findElement(elemento)).perform();
    }
    
    // Método para aguardar o elemento estar clicável
    public void aguardarElementoClicavel(By elemento, int tempo) {
        WebDriverWait wait = new WebDriverWait(driver, tempo);
        wait.until(ExpectedConditions.elementToBeClickable(elemento));
    }

    //Metodo para forçar clique com javascript
    public void clicarElementoComJavaScript(By elemento) {
        rolarAteElemento(elemento);
        WebElement webElement = driver.findElement(elemento);
        ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("arguments[0].click();", webElement);
    }
    
    //Metodo para apagar campo
    public void apagarTexto(By elemento) {
        WebElement campo = driver.findElement(elemento);
        campo.clear(); 
    }

    // Método para alternar para uma nova janela
    public void mudarParaNovaJanela() {
        String janelaAtual = driver.getWindowHandle();
        for (String janela : driver.getWindowHandles()) {
            if (!janela.equals(janelaAtual)) {
                driver.switchTo().window(janela);
                break;
            }
        }
    }

    // Método para alternar para a janela original
    public void voltarParaJanelaOriginal(String janelaOriginal) {
        driver.switchTo().window(janelaOriginal);
    }

    // Método para rolar a página até um elemento
    public void rolarAteElemento(By elemento) {
        ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView(true);", driver.findElement(elemento));
    }
    
 // Método para rolar a tela para baixo
    public void rolarTelaParaBaixo(int pixels) {
        ((org.openqa.selenium.JavascriptExecutor) driver).executeScript("window.scrollBy(0," + pixels + ")");
    }


    //Metodo para obter texto
    public String obterTexto(WebElement elemento) {
        return elemento.getText();
    }

}
